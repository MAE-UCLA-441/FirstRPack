mutate(Death_rate = Deaths_agg / (Deaths_agg + Recovered_agg))
return(covid_df)
}
covid_df = get_current_covid_data()
get_current_covid_data = function()
{
covid_df_raw = covid19.data()
covid_df = covid_df_raw %>%
select(Country_Region,Confirmed,Deaths, Recovered, Active) %>%
group_by(Country_Region) %>%
summarize(Active_agg = sum(Active),
Deaths_agg = sum(Deaths),
Recovered_agg = sum(Recovered),
Confirmed_agg = sum(Confirmed)) %>%
mutate(Death_rate = Deaths_agg / (Deaths_agg + Recovered_agg))
return(covid_df)
}
covid_df = get_current_covid_data()
covid_df
read.csv("World Health Data.csv")
World_data_raw = read.csv("World Health Data.csv")
dim(World_data_raw)
num_obs = dim(World_data_raw)[1]
is.na(World_data_raw)
sum(is.na(World_data_raw))
World_data_raw
World_data_raw == ".."
dplyr::na_if(World_data_raw, "..")
World_data = dplyr::na_if(World_data_raw, "..")
drop_na(World_data)
View(World_data)
colSums(is.na(World_data))
num_obs * threshold
threshold = .3 #Not accept variables with more missing data
num_obs * threshold
colSums(is.na(World_data)) < num_obs * threshold
World_data[ , colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[ , colSums(is.na(World_data)) < num_obs * threshold]
World_data
dim(World_data)
World_data
World_data = World_data[ , -c(1,2,4)]
drop_columns_if_NAS <- function(df, threshold){
num_obs = dim(df)[1]
df_cut = World_data[ , colSums(is.na(df)) < num_obs * threshold]
return(df_cut)
}
View(World_data_raw)
ncol(World_data)
num_vars
num_vars = ncol(World_data)
World_data
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars] , as.numeric)
World_data
World_data[,2]
is,na(World_data[,2])
is,na(World_data[,2])
is.na(World_data[,2])
World_data[,2][is.na(World_data[,2])]
mean(World_data[,2])
mean(World_data[,2], na.rm = TRUE)
World_data[,2][is.na(World_data[,2])] <- mean(World_data[,2], na.rm = TRUE)
for(i 2:num_vars){
for(i in 2:num_vars){
World_data[,i][is.na(World_data[,i])] <- mean(World_data[,i], na.rm = TRUE)
}
sum(is.na(World_data))
colnames(World_data[,2:num_vars])
World_data_knn = VIM:kNN(World_data, variable = colnames(World_data[,2:num_vars]), k=5)
World_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars]), k=5)
World_data_raw = read.csv("World Health Data.csv")
View(World_data_raw)
num_obs = dim(World_data_raw)[1]
sum(is.na(World_data_raw))
World_data_raw == ".."
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .3 #Not accept variables with more missing data
World_data = World_data[ , colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[ , -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars] , as.numeric)
World_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars]), k=5)
World_data_knn
World_data_knn = World_data_knn[1:num_vars]
World_data_knn
View(covid_df)
View(World_data)
covid_df =
covid_df %>%
rename(Country.Name = Country_Region)
df = merge(covid_df, World_data, by = "Country.Name")
df
df = merge(covid_df, World_data_knn, by = "Country.Name")
df
as.data.frame(x = list(2,2))
as.data.frame(x =  c(2,2))
?dQuote
dQuote(fields)
fields = 'fq=headline:("COVID-19")'
dQuote(fields)
fields = paste0('fq=headline:(', ')' )
term = dQuote("COVID-19")
fields = paste0('fq=headline:(', term,  ')' )
fields
term = dQuote("COVID-19")
fields = paste0('&fq=headline:(', term,  ')' )
PATH = paste0('https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex', fields)
jsonlite::fromJSON(PATH)
df = jsonlite::fromJSON(PATH)
df$heasdline
df$headline
df = jsonlite::fromJSON(PATH)
df = jsonlite::fromJSON(PATH)
df$headline
df
df$response$docs$headline
World_data_imp = World_data
#Mean imputataion
World_data_imp[,2][is.na(World_data_imp[,2])] <- mean(World_data[,2], na.rm = TRUE)
for(i in 1:num_vars){
World_data_imp[,i][is.na(World_data_imp[,i])] <- mean(World_data_imp[,i], na.rm = TRUE)
}
World_data
World_data[,2:11] = sapply(World_data[,2:11], as.numeric)
structure = '{"date":"date","cumulative":"cumCasesBySpecimenDate","daily":"newCasesBySpecimenDate","name":"areaName"}'
structure
library(magrittr)
library(tidyverse)
library(covid19.analytics)
library(dplyr)
library(VIM)
get_current_covid_data = function()
{
covid_df_raw = covid19.data()
covid_df = covid_df_raw %>%
select(Country_Region,Confirmed,Deaths, Recovered, Active) %>%
group_by(Country_Region) %>%
summarize(Active_agg = sum(Active),
Deaths_agg = sum(Deaths),
Recovered_agg = sum(Recovered),
Confirmed_agg = sum(Confirmed)) %>%
mutate(Death_rate = Deaths_agg / (Deaths_agg + Recovered_agg))
return(covid_df)
}
covid_df = get_current_covid_data()
covid_df
is.na(covid_df)
sum(is.na(covid_df))
covid_df = drop_na(covid_df)
covid_df
World_data_raw = read_csv("world Health Data.csv")
Veiw(World_data_raw)
View(World_data_raw)
is.na(World_data_raw)
sum(is.na(World_data_raw))
World_data_raw
World_data_raw == ".."
colSums(World_data_raw == "..")
colSums(World_data_raw == "..", na.rm = TRUE)
dplyr::na_if(World_data_raw, "..")
World_data = dplyr::na_if(World_data_raw, "..")
colSums(is.na(World_data))
num_obs = nrow(Wolrd_data_raw)
num_obs = nrow(World_data_raw)
num_obs
num_obs * threshold
threshold = .1
num_obs * threshold
threshold = .4
num_obs * threshold
colSums(is.na(World_data)) < num_obs * threshold
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data
nrow(World_data)
ncol(World_data)
World_data
World_data = World_data[, -c(1,2,4)]
World_data
ncol(World_data)
num_vars = ncol(World_data)
World_data[,2:num_vars]
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric())
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
World_data_raw = read_csv("world Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
num_vars
World_data_raw = read_csv("world Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
drop_na(World_data)
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
drop_columns_if_too_many_nas = function(df, threshold){
num_obs = nrow(df)
df = df[ ,colSums(is.na(df)) < num_obs * threshold]
}
mean(World_data[,2])
mean(World_data[,2], na.rm = TRUE)
World_data[,2]
mean(World_data[,2], na.rm = TRUE)
mean(World_data[,2], na.rm = TRUE)
mean(World_data[,2], na.rm = FALSE)
World_data[,2]
sum(World_data[,2])
World_data_raw = read_csv("world Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
World_data_raw = read_csv("world Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
mean(World_data[,2], na.rm = FALSE)
World_data[,2]
mean(drop_na(World_data[,2]), na.rm = FALSE)
median(World_data[,2], na.rm = FALSE)
median(World_data[,2], na.rm = TRUE)
mean(World_data[,2], na.rm = TRUE)
mean(World_data[,2], na.rm = TRUE)
VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars]), k = 5)
#Knn
Wordl_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars]), k = 5)
#Knn
World_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars]), k = 5)
World_data_knn
dim(World_data_knn)
1:num_vars
World_data_knn = World_data_knn[1:num_vars]
sum(is.na(World_data_knn))
#Knn
World_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars]), k = 5)
World_data_knn = World_data_knn[1:num_vars]
sum(is.na(World_data_knn))
is.na(World_data_knn)
colSums(is.na(World_data_knn))
World_data_knn
World_data_knn = drop_na(World_data_knn)
View(World_data_knn)
View(covid_df)
View(World_data_knn)
colnames(World_data_knn)[1] = colnames(covid_df)[1]
World_data_knn
covid_df
World_data_knn)
World_data_knn
df = merge(covid_df, World_data_knn, by = "Country_Region")
df
df
library(jsonlite)
###Sample URL
fromJSON('https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")')
fromJSON('https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")')
'https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")'
paste('https://api.nytimes.com/svc/search/v2/articlesearch.json","?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")')
'https://api.nytimes.com/svc/search/v2/articlesearch.json','?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")'
paste0('https://api.nytimes.com/svc/search/v2/articlesearch.json','?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")')
fromJSON(paste0('https://api.nytimes.com/svc/search/v2/articlesearch.json','?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")')
fromJSON(paste0('https://api.nytimes.com/svc/search/v2/articlesearch.json','?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")')
fromJSON(paste0('https://api.nytimes.com/svc/search/v2/articlesearch.json','?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex&fq=headline("Halloween")'))
dQuote("COVID-19")
APIkey = "Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex"
URL = 'https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key='
term = dQuote("COVID-19")
fields = paste0("&fq=headline:(", term,  ")" )
PATH = paste0('https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=Y9k7GxiyP7RwwbdA1qbFA5AqbaIbPwex', fields)
df = jsonlite::fromJSON(PATH)
df$response$docs$headline
PATH
colnames(World_data_knn)[1] = colnames(covid_df)[1]
library(magrittr)
library(tidyverse)
library(covid19.analytics)
library(dplyr)
library(VIM)
get_current_covid_data = function()
{
covid_df_raw = covid19.data()
covid_df = covid_df_raw %>%
select(Country_Region,Confirmed,Deaths, Recovered, Active) %>%
group_by(Country_Region) %>%
summarize(Active_agg = sum(Active),
Deaths_agg = sum(Deaths),
Recovered_agg = sum(Recovered),
Confirmed_agg = sum(Confirmed)) %>%
mutate(Death_rate = Deaths_agg / (Deaths_agg + Recovered_agg))
return(covid_df)
}
covid_df = get_current_covid_data()
sum(is.na(covid_df))
covid_df = drop_na(covid_df)
country_info <- function(){
covid_df = get_current_covid_data()
country = readline(prompt = "What Country would you like to know about?: ")
return(covid_df[covid_df["Country_Region"] == country,])
}
country_info()
Australia
country_info()
World_data_raw = read_csv("World Health Data.csv")
num_obs = nrow(World_data_raw)
num_vars = ncol(World_data)
World_data_raw = read_csv("World Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
drop_columns_if_too_many_nas = function(df, threshold){
num_obs = nrow(df)
df = df[ ,colSums(is.na(df)) < num_obs * threshold]
}
#3.1) Mean imputation
World_data[,2][is.na(World_data[,2])] <- mean(World_data[,2], na.rm = TRUE)
for(i in 2:num_vars) {
World_data[ , i][is.na(World_data[ , i])] <- mean(World_data[ , i], na.rm = TRUE)
}
# Challenge Figure out how to do this using apply
sum(is.na(World_data))
#3.2) Median imputation
for(i in 2:num_vars) {
World_data[ , i][is.na(World_data[ , i])] <- median(World_data[ , i], na.rm = TRUE)
}
median(World_data[ , i], na.rm = TRUE)
World_data
World_data_raw = read_csv("World Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
World_data_imp = World_data
World_data_imp_med = World_data
sum(is.na(World_data_imp))
sum(is.na(World_data_imp_med))
#3.1) Mean imputation
World_data_imp[,2][is.na(World_data_imp[,2])] <- mean(World_data_imp[,2], na.rm = TRUE)
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
sum(is.na(World_data_imp))
#3.2) Median imputation
for(i in 2:num_vars) {
World_data_imp_med[ , i][is.na(World_data_imp_med[ , i])] <- median(World_data_imp_med[ , i], na.rm = TRUE)
}
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
sum(is.na(World_data_imp))
for(i in 2:num_vars) {
World_data_imp_med[ , i][is.na(World_data_imp_med[ , i])] <- median(World_data_imp_med[ , i], na.rm = TRUE)
}
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
sum(is.na(World_data_imp))
World_data_imp
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
World_data_imp = drop_na(World_data_imp) # The function adds some NA values to the bottom, dropping here loses no data
sum(is.na(World_data_imp))
for(i in 2:num_vars) {
World_data_imp_med[ , i][is.na(World_data_imp_med[ , i])] <- median(World_data_imp_med[ , i], na.rm = TRUE)
}
World_data_imp_med = World_data
sum(is.na(World_data_imp_med))
for(i in 2:num_vars) {
World_data_imp_med[ , i][is.na(World_data_imp_med[ , i])] <- median(World_data_imp_med[ , i], na.rm = TRUE)
}
World_data
World_data_raw = read_csv("World Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data
World_data_imp = World_data
World_data_imp_med = World_data
sum(is.na(World_data_imp))
sum(is.na(World_data_imp_med))
#3.1) Mean imputation
World_data_imp[,2][is.na(World_data_imp[,2])] <- mean(World_data_imp[,2], na.rm = TRUE)
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
World_data_imp = drop_na(World_data_imp) # The function adds some NA values to the bottom, dropping here loses no data
sum(is.na(World_data_imp))
#3.2.) Nearest neighbor Imputation
World_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars] ) , k = 5)
World_data_knn = World_data_knn[1:num_vars]
sum(is.na(World_data_knn))
sum(is.na(World_data_knn))
World_data = World_data[1:(num_vars-5),]
World_data
World_data_raw = read_csv("World Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data = World_data[1:(num_obs-5),]
World_data
World_data_imp = World_data
World_data_imp_med = World_data
sum(is.na(World_data_imp))
sum(is.na(World_data_imp_med))
#3.1) Mean imputation
World_data_imp[,2][is.na(World_data_imp[,2])] <- mean(World_data_imp[,2], na.rm = TRUE)
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
World_data_imp = drop_na(World_data_imp) # The function adds some NA values to the bottom, dropping here loses no data
sum(is.na(World_data_imp))
#3.2.) Nearest neighbor Imputation
World_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars] ) , k = 5)
World_data_knn = World_data_knn[1:num_vars]
sum(is.na(World_data_knn))
World_data_raw = read_csv("World Health Data.csv")
num_obs = nrow(World_data_raw)
sum(is.na(World_data_raw))
colSums(World_data_raw == "..", na.rm = TRUE)
World_data = dplyr::na_if(World_data_raw, "..")
threshold = .1
World_data = World_data[ ,colSums(is.na(World_data)) < num_obs * threshold]
World_data = World_data[, -c(1,2,4)]
num_vars = ncol(World_data)
World_data[,2:num_vars] = sapply(World_data[,2:num_vars], as.numeric)
World_data = World_data[1:(num_obs-5),] #Quick fix to bottom 5 observations being all NAs
drop_columns_if_too_many_nas = function(df, threshold){
num_obs = nrow(df)
df = df[ ,colSums(is.na(df)) < num_obs * threshold]
}
World_data_imp = World_data
World_data_imp_med = World_data
sum(is.na(World_data_imp))
sum(is.na(World_data_imp_med))
#3.1) Mean imputation
World_data_imp[,2][is.na(World_data_imp[,2])] <- mean(World_data_imp[,2], na.rm = TRUE)
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
sum(is.na(World_data_imp))
#3.2.) Nearest neighbor Imputation
World_data_knn = VIM::kNN(World_data, variable = colnames(World_data[,2:num_vars] ) , k = 5)
World_data_knn = World_data_knn[1:num_vars]
sum(is.na(World_data_knn))
sum(is.na(World_data_imp))
mean(World_data_imp[ , i], na.rm = TRUE
)
?mean
World_data_imp[,2][is.na(World_data_imp[,2])] <- mean(World_data_imp[,2], na.rm = TRUE)
for(i in 2:num_vars) {
World_data_imp[ , i][is.na(World_data_imp[ , i])] <- mean(World_data_imp[ , i], na.rm = TRUE)
}
sum(is.na(World_data_imp))
World_data_imp
colnames(World_data_knn)[1] = colnames(covid_df)[1]
df = merge(covid_df, World_data_knn, by = "Country_Region")
df
version
